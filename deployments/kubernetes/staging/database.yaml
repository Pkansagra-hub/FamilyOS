# MemoryOS Staging - Database and Redis Services
# Sub-issue #6.3: Supporting services for staging deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-staging
  namespace: memoryos-staging
  labels:
    app: postgres
    environment: staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        environment: staging
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "memoryos_staging"
        - name: POSTGRES_USER
          value: "memoryos"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-staging-secret
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - memoryos
            - -d
            - memoryos_staging
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - memoryos
            - -d
            - memoryos_staging
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-staging-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-staging
  namespace: memoryos-staging
  labels:
    app: postgres
    environment: staging
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-staging-pvc
  namespace: memoryos-staging
  labels:
    app: postgres
    environment: staging
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-staging-secret
  namespace: memoryos-staging
  labels:
    app: postgres
    environment: staging
type: Opaque
data:
  password: "c3RhZ2luZ19wb3N0Z3Jlc19wYXNzd29yZA==" # staging_postgres_password

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-staging
  namespace: memoryos-staging
  labels:
    app: redis
    environment: staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        environment: staging
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        args:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-staging-secret
              key: password
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          limits:
            memory: "256Mi"
            cpu: "250m"
          requests:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-staging
  namespace: memoryos-staging
  labels:
    app: redis
    environment: staging
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-staging-secret
  namespace: memoryos-staging
  labels:
    app: redis
    environment: staging
type: Opaque
data:
  password: "c3RhZ2luZ19yZWRpc19wYXNzd29yZA==" # staging_redis_password
