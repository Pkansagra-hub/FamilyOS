asyncapi: "3.0.0"
info:
  title: "MemoryOS Enhanced Outbox Pattern - Storage Service"
  version: "1.0.0"
  description: |
    Enhanced Outbox Pattern implementation for MemoryOS Storage Service providing
    reliable event publishing with transactional guarantees, dead letter queue
    handling, and retry mechanisms.

    **Key Features:**
    - Transactional outbox table for guaranteed event delivery
    - Dead Letter Queue (DLQ) integration for failed events
    - Configurable retry policies with exponential backoff
    - Event ordering guarantees per aggregate
    - Duplicate detection and idempotency
    - Integration with Events Bus Infrastructure (EventBus, WAL, Offsets)

    **Architecture Integration:**
    - EventBus: Primary event routing mechanism
    - Validation: Event validation before publishing
    - Persistence: Outbox table persistence layer
    - WAL: Write-Ahead Log integration for durability
    - Pipeline: Event processing pipeline (P01-P20)
    - Offsets: Event stream offset management
    - DLQ: Dead Letter Queue for failed events

servers:
  production:
    host: "events.memoryos.ai"
    protocol: "kafka"
    description: "Production event bus with enhanced outbox"
    bindings:
      kafka:
        schemaRegistryUrl: "https://schema-registry.memoryos.ai"
        bootstrapServers: "kafka-cluster.memoryos.ai:9092"

channels:
  # ==========================================================================
  # OUTBOX EVENT CHANNELS
  # ==========================================================================

  storage.outbox.event:
    address: "storage.outbox.event"
    description: "Primary channel for outbox events"
    messages:
      OutboxEvent:
        $ref: "#/components/messages/OutboxEvent"
    bindings:
      kafka:
        topic: "storage.outbox.event"
        partitions: 24 # Higher partition count for throughput
        replicas: 3
        configs:
          retention.ms: 604800000 # 7 days
          cleanup.policy: "delete"
          min.insync.replicas: 2
          acks: "all"
          enable.idempotence: true

  storage.outbox.dlq:
    address: "storage.outbox.dlq"
    description: "Dead Letter Queue for failed outbox events"
    messages:
      OutboxDLQEvent:
        $ref: "#/components/messages/OutboxDLQEvent"
    bindings:
      kafka:
        topic: "storage.outbox.dlq"
        partitions: 6
        replicas: 3
        configs:
          retention.ms: 2592000000 # 30 days for analysis
          cleanup.policy: "compact,delete"

  storage.outbox.retry:
    address: "storage.outbox.retry"
    description: "Retry channel for failed outbox events"
    messages:
      OutboxRetryEvent:
        $ref: "#/components/messages/OutboxRetryEvent"
    bindings:
      kafka:
        topic: "storage.outbox.retry"
        partitions: 12
        replicas: 3
        configs:
          retention.ms: 86400000 # 24 hours

  storage.outbox.wal:
    address: "storage.outbox.wal"
    description: "Write-Ahead Log integration for outbox durability"
    messages:
      OutboxWALEvent:
        $ref: "#/components/messages/OutboxWALEvent"
    bindings:
      kafka:
        topic: "storage.outbox.wal"
        partitions: 6
        replicas: 3
        configs:
          retention.ms: 2592000000 # 30 days
          cleanup.policy: "compact"

operations:
  publishOutboxEvent:
    action: "send"
    channel:
      $ref: "#/channels/storage.outbox.event"
    description: "Publish events through enhanced outbox pattern"
    bindings:
      kafka:
        clientId: "storage-outbox-publisher"
        groupId: "storage-outbox-producers"

components:
  messages:
    OutboxEvent:
      name: "OutboxEvent"
      title: "Enhanced Outbox Event"
      summary: "Event published through enhanced outbox pattern"
      contentType: "application/json"
      payload:
        $ref: "#/components/schemas/OutboxEventPayload"

    OutboxDLQEvent:
      name: "OutboxDLQEvent"
      title: "Outbox Dead Letter Queue Event"
      summary: "Event that failed final processing"
      contentType: "application/json"
      payload:
        $ref: "#/components/schemas/OutboxDLQEventPayload"

    OutboxRetryEvent:
      name: "OutboxRetryEvent"
      title: "Outbox Retry Event"
      summary: "Event being retried after failure"
      contentType: "application/json"
      payload:
        $ref: "#/components/schemas/OutboxRetryEventPayload"

    OutboxWALEvent:
      name: "OutboxWALEvent"
      title: "Outbox Write-Ahead Log Event"
      summary: "WAL entry for outbox event durability"
      contentType: "application/json"
      payload:
        $ref: "#/components/schemas/OutboxWALEventPayload"

  schemas:
    # ========================================================================
    # BASE OUTBOX SCHEMAS
    # ========================================================================

    OutboxEventPayload:
      type: "object"
      required:
        [
          "outbox_id",
          "aggregate_id",
          "aggregate_type",
          "event_type",
          "event_payload",
          "event_metadata",
          "created_at",
          "sequence_number",
        ]
      properties:
        outbox_id:
          type: "string"
          description: "Unique outbox event identifier"
          pattern: "^outbox_[a-z0-9]{16}$"
          examples: ["outbox_abc123def456789"]

        aggregate_id:
          type: "string"
          description: "Aggregate identifier for event ordering"
          examples: ["episode_12345", "user_67890"]

        aggregate_type:
          type: "string"
          description: "Type of aggregate"
          enum:
            [
              "episode",
              "semantic_node",
              "transaction",
              "migration",
              "backup",
              "coordination",
            ]
          examples: ["episode", "transaction"]

        event_type:
          type: "string"
          description: "Type of storage event"
          enum:
            [
              "STORAGE_TRANSACTION_STARTED",
              "STORAGE_TRANSACTION_COMMITTED",
              "STORAGE_TRANSACTION_FAILED",
              "STORAGE_MIGRATION_COMPLETED",
              "STORAGE_PERFORMANCE_ALERT",
              "STORAGE_BACKUP_COMPLETED",
              "STORAGE_COORDINATION_STARTED",
            ]
          examples: ["STORAGE_TRANSACTION_COMMITTED"]

        event_payload:
          type: "object"
          description: "Actual event payload"
          examples:
            [
              {
                "transaction_id": "uow_001_20250916_123456",
                "stores_committed": ["EpisodicStore", "SemanticStore"],
                "receipt_id": "receipt_xyz789",
              },
            ]

        event_metadata:
          type: "object"
          description: "Event metadata for processing"
          required: ["correlation_id", "causation_id"]
          properties:
            correlation_id:
              type: "string"
              description: "Request correlation ID"
              examples: ["req_abc123def456"]

            causation_id:
              type: "string"
              description: "Event that caused this event"
              examples: ["evt_stor001_20250916_123456"]

            user_id:
              type: "string"
              description: "User associated with event"
              examples: ["user_12345"]

            tenant_id:
              type: "string"
              description: "Tenant identifier for multi-tenancy"
              examples: ["tenant_alpha"]

            event_version:
              type: "string"
              description: "Event schema version"
              pattern: "^[0-9]+\\.[0-9]+\\.[0-9]+$"
              examples: ["1.0.0"]

        created_at:
          type: "string"
          format: "date-time"
          description: "When event was created in outbox"
          examples: ["2025-09-16T12:34:56.789Z"]

        sequence_number:
          type: "integer"
          description: "Sequence number within aggregate for ordering"
          minimum: 1
          examples: [1, 25, 100]

        delivery_metadata:
          type: "object"
          description: "Delivery tracking metadata"
          properties:
            delivery_attempts:
              type: "integer"
              description: "Number of delivery attempts"
              minimum: 0
              default: 0
              examples: [0, 3, 5]

            first_attempt_at:
              type: "string"
              format: "date-time"
              description: "First delivery attempt timestamp"
              examples: ["2025-09-16T12:34:56.800Z"]

            last_attempt_at:
              type: "string"
              format: "date-time"
              description: "Last delivery attempt timestamp"
              examples: ["2025-09-16T12:35:01.500Z"]

            next_retry_at:
              type: "string"
              format: "date-time"
              description: "Next scheduled retry timestamp"
              examples: ["2025-09-16T12:35:30.000Z"]

            delivery_status:
              type: "string"
              enum: ["pending", "delivered", "failed", "dlq"]
              description: "Current delivery status"
              examples: ["pending", "delivered"]

            target_topic:
              type: "string"
              description: "Target Kafka topic for delivery"
              examples: ["storage.transaction.committed"]

            partition_key:
              type: "string"
              description: "Partition key for event ordering"
              examples: ["episode_12345", "user_67890"]

        retry_policy:
          type: "object"
          description: "Retry policy configuration"
          properties:
            max_attempts:
              type: "integer"
              description: "Maximum retry attempts"
              minimum: 1
              maximum: 10
              default: 5
              examples: [5, 10]

            base_delay_ms:
              type: "integer"
              description: "Base delay between retries"
              minimum: 100
              default: 1000
              examples: [1000, 5000]

            max_delay_ms:
              type: "integer"
              description: "Maximum delay between retries"
              minimum: 1000
              default: 60000
              examples: [60000, 300000]

            backoff_multiplier:
              type: "number"
              description: "Exponential backoff multiplier"
              minimum: 1.0
              maximum: 10.0
              default: 2.0
              examples: [2.0, 1.5]

            jitter_enabled:
              type: "boolean"
              description: "Whether to add random jitter"
              default: true
              examples: [true, false]

    # ========================================================================
    # DLQ EVENT SCHEMA
    # ========================================================================

    OutboxDLQEventPayload:
      allOf:
        - $ref: "#/components/schemas/OutboxEventPayload"
        - type: "object"
          required: ["dlq_reason", "failure_details", "moved_to_dlq_at"]
          properties:
            dlq_reason:
              type: "string"
              description: "Reason for moving to DLQ"
              enum:
                [
                  "max_retries_exceeded",
                  "poison_message",
                  "schema_validation_failed",
                  "processing_timeout",
                  "permanent_failure",
                ]
              examples: ["max_retries_exceeded", "schema_validation_failed"]

            failure_details:
              type: "object"
              description: "Details of the final failure"
              required: ["error_code", "error_message"]
              properties:
                error_code:
                  type: "string"
                  examples: ["OUTBOX001", "VALIDATION_FAILED"]

                error_message:
                  type: "string"
                  examples: ["Event failed schema validation after 5 attempts"]

                last_error_stack:
                  type: "string"
                  description: "Stack trace of last error"

                processing_duration_ms:
                  type: "integer"
                  description: "Total processing time before DLQ"
                  examples: [30000, 120000]

            moved_to_dlq_at:
              type: "string"
              format: "date-time"
              description: "When event was moved to DLQ"
              examples: ["2025-09-16T12:40:00.000Z"]

            recovery_instructions:
              type: "object"
              description: "Instructions for manual recovery"
              properties:
                manual_intervention_required:
                  type: "boolean"
                  description: "Whether manual intervention is needed"

                recovery_steps:
                  type: "array"
                  items:
                    type: "string"
                  description: "Steps to recover this event"
                  examples: [["Fix schema validation", "Replay from DLQ"]]

                escalation_contacts:
                  type: "array"
                  items:
                    type: "string"
                  description: "Contacts for escalation"
                  examples: [["storage-team@memoryos.ai"]]

    # ========================================================================
    # RETRY EVENT SCHEMA
    # ========================================================================

    OutboxRetryEventPayload:
      allOf:
        - $ref: "#/components/schemas/OutboxEventPayload"
        - type: "object"
          required: ["retry_attempt", "retry_reason", "scheduled_retry_at"]
          properties:
            retry_attempt:
              type: "integer"
              description: "Current retry attempt number"
              minimum: 1
              examples: [1, 3, 5]

            retry_reason:
              type: "string"
              description: "Reason for retry"
              enum:
                [
                  "transient_failure",
                  "network_timeout",
                  "service_unavailable",
                  "rate_limit_exceeded",
                  "temporary_error",
                ]
              examples: ["network_timeout", "service_unavailable"]

            scheduled_retry_at:
              type: "string"
              format: "date-time"
              description: "When retry is scheduled"
              examples: ["2025-09-16T12:35:30.000Z"]

            previous_failure:
              type: "object"
              description: "Details of previous failure"
              properties:
                error_code:
                  type: "string"
                  examples: ["NETWORK_TIMEOUT", "SERVICE_UNAVAILABLE"]

                error_message:
                  type: "string"
                  examples: ["Connection timeout after 30 seconds"]

                failed_at:
                  type: "string"
                  format: "date-time"
                  examples: ["2025-09-16T12:35:00.000Z"]

    # ========================================================================
    # WAL EVENT SCHEMA
    # ========================================================================

    OutboxWALEventPayload:
      type: "object"
      required:
        ["wal_id", "outbox_id", "operation_type", "wal_timestamp", "wal_lsn"]
      properties:
        wal_id:
          type: "string"
          description: "Unique WAL entry identifier"
          pattern: "^wal_[a-z0-9]{16}$"
          examples: ["wal_def456ghi789abc"]

        outbox_id:
          type: "string"
          description: "Associated outbox event ID"
          pattern: "^outbox_[a-z0-9]{16}$"
          examples: ["outbox_abc123def456789"]

        operation_type:
          type: "string"
          description: "Type of WAL operation"
          enum: ["insert", "update", "delete", "checkpoint"]
          examples: ["insert", "update"]

        wal_timestamp:
          type: "string"
          format: "date-time"
          description: "WAL operation timestamp"
          examples: ["2025-09-16T12:34:56.789Z"]

        wal_lsn:
          type: "string"
          description: "Log Sequence Number"
          pattern: "^[0-9A-F]+/[0-9A-F]+$"
          examples: ["0/1A2B3C4D", "1/2B3C4D5E"]

        transaction_id:
          type: "string"
          description: "Database transaction ID"
          examples: ["txn_abc123def456"]

        checkpoint_data:
          type: "object"
          description: "Checkpoint information for recovery"
          properties:
            checkpoint_id:
              type: "string"
              examples: ["ckpt_001_20250916_123456"]

            committed_events_count:
              type: "integer"
              description: "Number of events committed at checkpoint"
              examples: [100, 1000]

            last_sequence_number:
              type: "integer"
              description: "Last processed sequence number"
              examples: [999, 5000]

tags:
  - name: "outbox"
    description: "Enhanced outbox pattern events"
  - name: "dlq"
    description: "Dead letter queue events"
  - name: "retry"
    description: "Retry mechanism events"
  - name: "wal"
    description: "Write-ahead log integration"
