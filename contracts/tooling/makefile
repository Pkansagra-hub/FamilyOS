.PHONY: validate openapi lint test install-deps help

# Default target
help:
	@echo "MemoryOS Contracts Build Tools"
	@echo "=============================="
	@echo ""
	@echo "Available targets:"
	@echo "  validate     - Validate all schemas and contracts"
	@echo "  openapi      - Bundle and validate OpenAPI specs"
	@echo "  lint         - Run Spectral linting on OpenAPI specs"
	@echo "  test         - Run all validation tests"
	@echo "  install-deps - Install Python dependencies"
	@echo "  clean        - Clean temporary files"
	@echo "  help         - Show this help message"

# Install required dependencies
install-deps:
	pip install jsonschema pyyaml openapi-spec-validator
	npm install -g @redocly/cli spectral

# Validate all contracts
validate:
	python3 tooling/validate_all.py

# Bundle and validate OpenAPI specs
openapi:
	@echo "üîç Bundling OpenAPI specifications..."
	@for spec in modules/*/api/openapi.yaml; do \
		if [ -f "$$spec" ]; then \
			echo "Bundling $$spec"; \
			npx @redocly/cli bundle "$$spec" -o /dev/null || true; \
		fi \
	done
	@echo "‚úÖ OpenAPI bundling complete"

# Run Spectral linting
lint:
	@echo "üßπ Running Spectral linting..."
	@if [ -f tooling/spectral.config.yaml ]; then \
		for spec in modules/*/api/openapi.yaml; do \
			if [ -f "$$spec" ]; then \
				echo "Linting $$spec"; \
				npx spectral lint "$$spec" -r tooling/spectral.config.yaml || true; \
			fi \
		done; \
	else \
		echo "‚ö†Ô∏è  No Spectral config found, using default rules"; \
		for spec in modules/*/api/openapi.yaml; do \
			if [ -f "$$spec" ]; then \
				echo "Linting $$spec"; \
				npx spectral lint "$$spec" || true; \
			fi \
		done; \
	fi
	@echo "‚úÖ Linting complete"

# Run all tests
test: validate openapi lint
	@echo "üéâ All contract tests passed!"

# Clean temporary files
clean:
	@echo "üßπ Cleaning temporary files..."
	@find . -name "*.pyc" -delete
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo "‚úÖ Cleanup complete"

# PowerShell variants for Windows
validate-ps:
	python tooling/validate_all.py

openapi-ps:
	@echo "üîç Bundling OpenAPI specifications..."
	Get-ChildItem -Path "modules/*/api/openapi.yaml" -Recurse | ForEach-Object { \
		Write-Host "Bundling $$($_.FullName)"; \
		npx @redocly/cli bundle "$$($_.FullName)" -o nul; \
	}

lint-ps:
	@echo "üßπ Running Spectral linting..."
	Get-ChildItem -Path "modules/*/api/openapi.yaml" -Recurse | ForEach-Object { \
		Write-Host "Linting $$($_.FullName)"; \
		npx spectral lint "$$($_.FullName)" -r tooling/spectral.config.yaml; \
	}
